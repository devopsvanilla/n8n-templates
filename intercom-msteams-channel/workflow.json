{
  "version": "1.0.0",
  "meta": {
    "templateId": "intercom-msteams-bidirectional",
    "name": "Intercom â†” Microsoft Teams Integration",
    "description": "Bidirectional communication between Intercom and Microsoft Teams with thread mapping and robust error handling.",
    "categories": ["Communication", "Customer Support", "Integration"],
    "tags": ["intercom", "teams", "webhook", "bidirectional", "threading"],
    "author": "devopsvanilla",
    "createdAt": "2025-09-28",
    "n8nVersion": ">=0.220.0"
  },
  "nodes": [
    {
      "parameters": {
        "event": "message",
        "channel": "{{$env.TEAMS_TRIGGER_CHANNEL_ID}}"
      },
      "name": "Microsoft Teams Trigger",
      "type": "n8n-nodes-base.microsoftTeams.trigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "{{$json[\"text\"]}}",
              "operation": "startsWith",
              "value2": "/reply"
            }
          ]
        }
      },
      "name": "IF /reply",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "functionCode": "const message = $json[\"text\"] || '';\nreturn [{ json: { cleanedMessage: message.replace(/^\\/reply\\s*/, '') } }];"
      },
      "name": "Function Clean Prefix",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "url": "https://api.intercom.io/messages",
        "options": {
          "headers": {
            "Authorization": "Bearer {{$env.INTERCOM_API_TOKEN}}",
            "Content-Type": "application/json"
          },
          "timeout": 10000,
          "retry": {"enabled": true, "maxTries": 3}
        },
        "body": {
          "message_type": "comment",
          "body": "{{$json[\"cleanedMessage\"]}}",
          "admin_id": "{{$env.INTERCOM_ADMIN_ID}}"
        }
      },
      "name": "HTTP Request Intercom",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [850, 300]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "intercom-inbound",
        "responseMode": "onReceived",
        "responseData": "default",
        "options": {"responseCode": 200}
      },
      "name": "Intercom Webhook (Inbound)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 600]
    },
    {
      "parameters": {
        "functionCode": "// HMAC validation stub: check header presence when secret configured.\nconst headers = $headers || {};\nconst hasSecret = Boolean($env.INTERCOM_WEBHOOK_SECRET);\nconst sig = headers['x-hub-signature-256'] || headers['X-Hub-Signature-256'] || '';\nif (hasSecret && !sig) { throw new Error('Missing Intercom signature header x-hub-signature-256'); }\nreturn [{ json: { ...$json, _auth: { hmacHeaderPresent: Boolean(sig), secretConfigured: hasSecret } } }];"
      },
      "name": "Validate Intercom HMAC",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [400, 600]
    },
    {
      "parameters": {
        "functionCode": "const b = $json;\nconst data = b.data || {};\nconst item = data.item || {};\nconst author = item.author || {};\nconst conversationId = item.id || item.conversation_id || data.id || 'unknown';\nconst raw = (item.conversation_message && item.conversation_message.body) || item.body || b.body || '';\nconst text = String(raw).replace(/<[^>]+>/g, '').trim();\nconst authorType = author.type || 'unknown';\nconst authorName = author.name || author.user_id || author.id || authorType;\nconst summary = `Intercom (${authorType}${authorName ? `: ${authorName}` : ''}) [conv:${conversationId}]\\n${text}`;\nreturn [{ json: { teamsMessage: summary, conversationId } }];"
      },
      "name": "Build Teams Message",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [500, 600]
    },
    {
      "parameters": {
        "functionCode": "const convId = String($json.conversationId || '');\nif (!convId || convId.trim() === '') { throw new Error('Invalid conversation ID received'); }\nconst sqlConvId = convId.replace(/[\\x00-\\x1f\\x7f-\\x9f]/g, '').replace(/'/g, \"''\").substring(0, 100);\nif (!sqlConvId) { throw new Error('Conversation ID became empty after sanitization'); }\nreturn [{ json: { ...$json, sqlConvId } }];"
      },
      "name": "Sanitize IDs",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [620, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE((SELECT teams_message_id FROM conversation_threads WHERE intercom_conversation_id = '{{ $json[\\"sqlConvId\\"] }}' AND team_id = '{{$env.TEAMS_TEAM_ID}}' AND channel_id = '{{$env.TEAMS_CHANNEL_ID}}' LIMIT 1),'') AS mapped_message_id;"
      },
      "name": "Lookup Thread Mapping (PG)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [720, 600]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [],
          "string": [ { "value1": "{{$json[\\"mapped_message_id\\"]}}", "operation": "isNotEmpty" } ],
          "collection": []
        }
      },
      "name": "IF Has Mapping",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [940, 600]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://graph.microsoft.com/v1.0/teams/{{$env.TEAMS_TEAM_ID}}/channels/{{$env.TEAMS_CHANNEL_ID}}/messages/{{$json[\\"mapped_message_id\\"]}}/replies",
        "jsonParameters": true,
        "options": {
          "headers": {"Authorization": "Bearer {{$env.MS_GRAPH_TOKEN}}", "Content-Type": "application/json"},
          "timeout": 15000,
          "retry": {"enabled": true, "maxTries": 2}
        },
        "body": {"body": {"contentType": "html", "content": "{{$json[\\"teamsMessage\\"]}}"}}
      },
      "name": "Post Reply to Thread",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1180, 540]
    },
    {
      "parameters": {"functionCode": "const err = $json.error || $json; return [{ json: { _error: { scope: 'graph-reply', err } } }];"},
      "name": "Log Graph Reply Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1380, 460]
    },
    {
      "parameters": {"functionCode": "return [{ json: { ...$json, _fallback: { action: 'post-new-message-instead-of-reply' } } }];"},
      "name": "Fallback Graph Reply",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1580, 460]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "https://graph.microsoft.com/v1.0/teams/{{$env.TEAMS_TEAM_ID}}/channels/{{$env.TEAMS_CHANNEL_ID}}/messages",
        "jsonParameters": true,
        "options": {
          "headers": {"Authorization": "Bearer {{$env.MS_GRAPH_TOKEN}}", "Content-Type": "application/json"},
          "timeout": 15000,
          "retry": {"enabled": true, "maxTries": 2}
        },
        "body": {"body": {"contentType": "html", "content": "{{$json[\\"teamsMessage\\"]}}"}}
      },
      "name": "Create Teams Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 1,
      "position": [1180, 660]
    },
    {
      "parameters": {"functionCode": "const err = $json.error || $json; return [{ json: { _error: { scope: 'graph-create', err } } }];"},
      "name": "Log Graph Create Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1380, 740]
    },
    {
      "parameters": {"functionCode": "return [{ json: { ...$json, _fallback: { action: 'notify-admin-to-manually-post' } } }];"},
      "name": "Fallback Graph Create",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1580, 740]
    },
    {
      "parameters": {"functionCode": "const err = $json.error || $json; return [{ json: { _error: { scope: 'intercom-request', err } } }];"},
      "name": "Log Intercom Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1050, 180]
    },
    {
      "parameters": {"functionCode": "return [{ json: { ...$json, _fallback: { action: 'intercom-queue-or-retry-later' } } }];"},
      "name": "Fallback Intercom",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1250, 180]
    },
    {
      "parameters": {"functionCode": "const id = $json.id || ($json.body && $json.body.id) || ''; return [{ json: { ...$json, createdMessageId: id } }];"},
      "name": "Extract Graph Message ID",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1400, 660]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversation_threads (intercom_conversation_id, team_id, channel_id, teams_message_id) VALUES ('{{ $json[\\"sqlConvId\\"] }}','{{$env.TEAMS_TEAM_ID}}','{{$env.TEAMS_CHANNEL_ID}}','{{ $json[\\"createdMessageId\\"] }}') ON CONFLICT (intercom_conversation_id) DO UPDATE SET teams_message_id = EXCLUDED.teams_message_id, team_id = EXCLUDED.team_id, channel_id = EXCLUDED.channel_id, updated_at = NOW();"
      },
      "name": "Upsert Thread Mapping (PG)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1620, 660]
    }
  ],
  "connections": {
    "Microsoft Teams Trigger": {"main": [[{"node": "IF /reply", "type": "main", "index": 0}]]},
    "IF /reply": {"main": [[{"node": "Function Clean Prefix", "type": "main", "index": 0}], []]},
    "Function Clean Prefix": {"main": [[{"node": "HTTP Request Intercom", "type": "main", "index": 0}]]},
    "HTTP Request Intercom": {"error": [[{"node": "Log Intercom Error", "type": "main", "index": 0}]]},
    "Log Intercom Error": {"main": [[{"node": "Fallback Intercom", "type": "main", "index": 0}]]},
    "Intercom Webhook (Inbound)": {"main": [[{"node": "Validate Intercom HMAC", "type": "main", "index": 0}]]},
    "Validate Intercom HMAC": {"main": [[{"node": "Build Teams Message", "type": "main", "index": 0}]], "error": [[{"node": "Fallback Intercom", "type": "main", "index": 0}]]},
    "Build Teams Message": {"main": [[{"node": "Sanitize IDs", "type": "main", "index": 0}]]},
    "Sanitize IDs": {"main": [[{"node": "Lookup Thread Mapping (PG)", "type": "main", "index": 0}]]},
    "Lookup Thread Mapping (PG)": {"main": [[{"node": "IF Has Mapping", "type": "main", "index": 0}]]},
    "IF Has Mapping": {"main": [[{"node": "Post Reply to Thread", "type": "main", "index": 0}], [{"node": "Create Teams Message", "type": "main", "index": 0}]]},
    "Post Reply to Thread": {"error": [[{"node": "Log Graph Reply Error", "type": "main", "index": 0}]]},
    "Log Graph Reply Error": {"main": [[{"node": "Fallback Graph Reply", "type": "main", "index": 0}]]},
    "Create Teams Message": {"main": [[{"node": "Extract Graph Message ID", "type": "main", "index": 0}]], "error": [[{"node": "Log Graph Create Error", "type": "main", "index": 0}]]},
    "Log Graph Create Error": {"main": [[{"node": "Fallback Graph Create", "type": "main", "index": 0}]]},
    "Extract Graph Message ID": {"main": [[{"node": "Upsert Thread Mapping (PG)", "type": "main", "index": 0}]]}
  }
}