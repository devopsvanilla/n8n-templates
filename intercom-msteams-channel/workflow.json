{
  "name": "Intercom â†” Microsoft Teams Integration",
  "nodes": [
    {
      "parameters": {
        "event": "message",
        "channel": "={{$env.TEAMS_TRIGGER_CHANNEL_ID}}"
      },
      "id": "teams-trigger-1",
      "name": "Microsoft Teams Trigger",
      "type": "n8n-nodes-base.microsoftTeamsTrigger",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.text}}",
              "operation": "startsWith",
              "value2": "/reply"
            }
          ]
        }
      },
      "id": "if-reply-1",
      "name": "IF /reply",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "const message = $json.text || '';\nreturn { cleanedMessage: message.replace(/^\\/reply\\s*/, '') };"
      },
      "id": "function-clean-prefix-1",
      "name": "Function Clean Prefix",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.intercom.io/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.INTERCOM_API_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": "={\n  \"message_type\": \"comment\",\n  \"body\": $json.cleanedMessage,\n  \"admin_id\": $env.INTERCOM_ADMIN_ID\n}",
        "options": {
          "timeout": 10000,
          "retry": {
            "enabled": true,
            "maxTries": 3
          }
        }
      },
      "id": "http-request-intercom-1",
      "name": "HTTP Request Intercom",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [850, 300],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "intercom-inbound",
        "responseMode": "onReceived",
        "responseData": "default",
        "options": {
          "responseCode": 200
        }
      },
      "id": "intercom-webhook-1",
      "name": "Intercom Webhook (Inbound)",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 600],
      "webhookId": "intercom-inbound-webhook"
    },
    {
      "parameters": {
        "jsCode": "// HMAC validation stub: check header presence when secret configured.\nconst headers = $headers || {};\nconst hasSecret = Boolean($env.INTERCOM_WEBHOOK_SECRET);\nconst sig = headers['x-hub-signature-256'] || headers['X-Hub-Signature-256'] || '';\nif (hasSecret && !sig) { \n  throw new Error('Missing Intercom signature header x-hub-signature-256'); \n}\nreturn { \n  ...$json, \n  _auth: { \n    hmacHeaderPresent: Boolean(sig), \n    secretConfigured: hasSecret \n  } \n};"
      },
      "id": "validate-intercom-hmac-1",
      "name": "Validate Intercom HMAC",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [400, 600],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const b = $json;\nconst data = b.data || {};\nconst item = data.item || {};\nconst author = item.author || {};\nconst conversationId = item.id || item.conversation_id || data.id || 'unknown';\nconst raw = (item.conversation_message && item.conversation_message.body) || item.body || b.body || '';\nconst text = String(raw).replace(/<[^>]+>/g, '').trim();\nconst authorType = author.type || 'unknown';\nconst authorName = author.name || author.user_id || author.id || authorType;\nconst summary = `Intercom (${authorType}${authorName ? `: ${authorName}` : ''}) [conv:${conversationId}]\\n${text}`;\nreturn { teamsMessage: summary, conversationId };"
      },
      "id": "build-teams-message-1",
      "name": "Build Teams Message",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [580, 600]
    },
    {
      "parameters": {
        "jsCode": "const convId = String($json.conversationId || '');\nif (!convId || convId.trim() === '') { \n  throw new Error('Invalid conversation ID received'); \n}\nconst sqlConvId = convId.replace(/[\\x00-\\x1f\\x7f-\\x9f]/g, '').replace(/'/g, \"''\").substring(0, 100);\nif (!sqlConvId) { \n  throw new Error('Conversation ID became empty after sanitization'); \n}\nreturn { ...$json, sqlConvId };"
      },
      "id": "sanitize-ids-1",
      "name": "Sanitize IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [740, 600]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE((SELECT teams_message_id FROM conversation_threads WHERE intercom_conversation_id = '={{ $json.sqlConvId }}' AND team_id = '={{$env.TEAMS_TEAM_ID}}' AND channel_id = '={{$env.TEAMS_CHANNEL_ID}}' LIMIT 1),'') AS mapped_message_id;"
      },
      "id": "lookup-thread-mapping-1",
      "name": "Lookup Thread Mapping (PG)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [900, 600]
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.mapped_message_id}}",
              "operation": "isNotEmpty"
            }
          ]
        }
      },
      "id": "if-has-mapping-1",
      "name": "IF Has Mapping",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1060, 600]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/teams/{{$env.TEAMS_TEAM_ID}}/channels/{{$env.TEAMS_CHANNEL_ID}}/messages/{{$json.mapped_message_id}}/replies",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.MS_GRAPH_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": "={\n  \"body\": {\n    \"contentType\": \"html\",\n    \"content\": $json.teamsMessage\n  }\n}",
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxTries": 2
          }
        }
      },
      "id": "post-reply-to-thread-1",
      "name": "Post Reply to Thread",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1280, 540],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const err = $json.error || $json; \nreturn { _error: { scope: 'graph-reply', err } };"
      },
      "id": "log-graph-reply-error-1",
      "name": "Log Graph Reply Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1480, 460]
    },
    {
      "parameters": {
        "jsCode": "return { ...$json, _fallback: { action: 'post-new-message-instead-of-reply' } };"
      },
      "id": "fallback-graph-reply-1",
      "name": "Fallback Graph Reply",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 460]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://graph.microsoft.com/v1.0/teams/{{$env.TEAMS_TEAM_ID}}/channels/{{$env.TEAMS_CHANNEL_ID}}/messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{$env.MS_GRAPH_TOKEN}}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "body": "={\n  \"body\": {\n    \"contentType\": \"html\",\n    \"content\": $json.teamsMessage\n  }\n}",
        "options": {
          "timeout": 15000,
          "retry": {
            "enabled": true,
            "maxTries": 2
          }
        }
      },
      "id": "create-teams-message-1",
      "name": "Create Teams Message",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [1280, 660],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "const err = $json.error || $json; \nreturn { _error: { scope: 'graph-create', err } };"
      },
      "id": "log-graph-create-error-1",
      "name": "Log Graph Create Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1480, 740]
    },
    {
      "parameters": {
        "jsCode": "return { ...$json, _fallback: { action: 'notify-admin-to-manually-post' } };"
      },
      "id": "fallback-graph-create-1",
      "name": "Fallback Graph Create",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1680, 740]
    },
    {
      "parameters": {
        "jsCode": "const err = $json.error || $json; \nreturn { _error: { scope: 'intercom-request', err } };"
      },
      "id": "log-intercom-error-1",
      "name": "Log Intercom Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 180]
    },
    {
      "parameters": {
        "jsCode": "return { ...$json, _fallback: { action: 'intercom-queue-or-retry-later' } };"
      },
      "id": "fallback-intercom-1",
      "name": "Fallback Intercom",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1250, 180]
    },
    {
      "parameters": {
        "jsCode": "const id = $json.id || ($json.body && $json.body.id) || ''; \nreturn { ...$json, createdMessageId: id };"
      },
      "id": "extract-graph-message-id-1",
      "name": "Extract Graph Message ID",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1500, 660]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO conversation_threads (intercom_conversation_id, team_id, channel_id, teams_message_id) VALUES ('={{ $json.sqlConvId }}','={{$env.TEAMS_TEAM_ID}}','={{$env.TEAMS_CHANNEL_ID}}','={{ $json.createdMessageId }}') ON CONFLICT (intercom_conversation_id) DO UPDATE SET teams_message_id = EXCLUDED.teams_message_id, team_id = EXCLUDED.team_id, channel_id = EXCLUDED.channel_id, updated_at = NOW();"
      },
      "id": "upsert-thread-mapping-1",
      "name": "Upsert Thread Mapping (PG)",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [1720, 660]
    }
  ],
  "connections": {
    "Microsoft Teams Trigger": {
      "main": [
        [
          {
            "node": "IF /reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF /reply": {
      "main": [
        [
          {
            "node": "Function Clean Prefix",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Function Clean Prefix": {
      "main": [
        [
          {
            "node": "HTTP Request Intercom",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request Intercom": {
      "main": [
        []
      ],
      "error": [
        [
          {
            "node": "Log Intercom Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Intercom Error": {
      "main": [
        [
          {
            "node": "Fallback Intercom",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intercom Webhook (Inbound)": {
      "main": [
        [
          {
            "node": "Validate Intercom HMAC",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Intercom HMAC": {
      "main": [
        [
          {
            "node": "Build Teams Message",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Fallback Intercom",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Teams Message": {
      "main": [
        [
          {
            "node": "Sanitize IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sanitize IDs": {
      "main": [
        [
          {
            "node": "Lookup Thread Mapping (PG)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Lookup Thread Mapping (PG)": {
      "main": [
        [
          {
            "node": "IF Has Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF Has Mapping": {
      "main": [
        [
          {
            "node": "Post Reply to Thread",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Teams Message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Reply to Thread": {
      "main": [
        []
      ],
      "error": [
        [
          {
            "node": "Log Graph Reply Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Graph Reply Error": {
      "main": [
        [
          {
            "node": "Fallback Graph Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Teams Message": {
      "main": [
        [
          {
            "node": "Extract Graph Message ID",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Log Graph Create Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Log Graph Create Error": {
      "main": [
        [
          {
            "node": "Fallback Graph Create",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Graph Message ID": {
      "main": [
        [
          {
            "node": "Upsert Thread Mapping (PG)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 2,
  "updatedAt": "2025-09-28T12:00:00.000Z",
  "versionId": "1"
}
